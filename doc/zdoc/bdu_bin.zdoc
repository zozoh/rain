#title:BDU-BIN如何工作的
#author:zozoh
#index:0,1
------------------------------------------------------------------------------------
BIN 的数据结构
    
    BIN 不存储任何数据再硬盘上，但是它提供一个 dump 命令，将内存中的数据输出到硬盘中:

    系统中所有 BDU : gin-dump bdus
    {{{
    406c8f497fb3 {
        ip     : 192.168.2.48            # IP 地址
        port   : 9431                    # 本节点工作端口
        lm     : 2012-12-23 15:23:21     # 最后一次心跳时间
        disk   : 2432312/892133245       # 磁盘容量
        num    : 7812                    # 存储的数据数量
        stat   : sync-out | sync-in | ready
        uptime : 3:51  up 12 days, 12:31, 8 users, load averages: 1.15 1.21 1.30
        load   : 1.24
        os     : CentOS 6.1
        app    : BDU_2.8
    }   # 单行遇到一个 } 表示块结束
    ...
    }}}

    数据所在的物理 BDU : gin-dump data
    {{{
    0031360ffcaddcc7fd295dab18dc1644123e1704 : 406c8f497fb3, 7cd1c37a8386   # 数据与机器 MAC 的映射
    ...
    }}}

------------------------------------------------------------------------------------
BIN 的 HTTP 连接协议
    
    /ping : 汇报自身状态
        GET 参数:
        || mac || 本 BDU 的 MAC, 例如 "406c8f497fb3" ||

        POST BODY:
        {{{
        # 请参见 gind-ump bdus 的内容
        }}}

        返回:
        {{{
        HTTP 200 : 正常
        否则，应该试图去寻味 rRounter，看看 BIN 是否可用
        }}}

    /set : 汇报自身数据
        GET 参数:
        || mac || 本 BDU 的 MAC, 例如 "406c8f497fb3" ||

        POST BODY:
        {{{
        0031360ffcaddcc7fd295dab18dc1644123e1704    # 一行一个数据指纹
        ...
        }}}

        返回:
        {{{
        HTTP 200 : 成功
        否则，应该试图去寻味 rRounter，看看 BIN 是否可用
        }}}

    /get : 根据数据获取BDU列表
        GET 参数:
        || mac || 本 BDU 的 MAC, 例如 "406c8f497fb3" ||

        返回:
        {{{
        HTTP 200 : 406c8f497fb3, 7cd1c37a8386    # 管理这个数据的 BDU 列表，原始顺序
        否则，应该试图去寻味 rRounter，看看 BIN 是否可用
        }}}

    /bdu : 获取 BDU 的详情
        GET 参数:
        || mac || 本 BDU 的 MAC, 例如 "406c8f497fb3" ||

        返回:
        {{{
        HTTP 200 : # 请参见 gind-ump bdus 的内容
        否则，应该试图去寻味 rRounter，看看 BIN 是否可用
        }}}

    /which : 根据数据获得IP
        GET 参数:
        || id || SHA1 的文件指纹 ||

        返回:
        {{{
        HTTP 200 : 192.168.2.48:9401, 192.168.2.77:8312   # 按照 load 排序，非 ready 的节点将被过滤掉
        HTTP 503 : 没有可用节点，"Retry-After" 如果没有被设置，则默认 5 秒后重试
        否则，应该试图去寻味 rRounter，看看 BIN 是否可用
        }}}

------------------------------------------------------------------------------------
BDU 的数据结构
    
    BDU 利用操作系统的文件系统进行大数据的索引

    {{{
    %BDU-ROOT%          # 和 Git 一样，一个文件的唯一标识为它内容的 SHA1 串
        00              # 头两位，将作为文件夹名称
            3136        # 次四位，将作为第二级文件夹内容
                0ffcaddcc7fd295dab18dc1644123e1704         # 这是个二进制文件内容
                0ffcaddcc7fd295dab18dc1644123e1704.meta    # 这是这个二进制文件的元数据
                78a7298699f05c91b9629f8047ad999712
                78a7298699f05c91b9629f8047ad999712.meta
                ...
        ...

    }}}
     * 文件的元数据文件将记录这个二进制文件的一些原始信息，它即使没有，也不影响 BDU 的正常工作
     * 有元数据仅仅是为了能够更快速的查看某个 BDU 的数据内容，以及有可能做一些数据反向工程

------------------------------------------------------------------------------------
BDU 的 HTTP 连接协议

    /m/r : 读取 meta
        GET 参数
        || id || SHA1 的文件指纹 ||
        
        {{{
        HTTP 200 : 返回 meta 文件的内容（即，JSON 字符串）
                   如果没有 meta 文件，但是有数据文件，则生成一个空的 JSON 字符串
        HTTP 503 : 服务器内部节点正在同步数据，"Retry-After" 如果没有被设置，则默认 3 秒后重试
        HTTP 410 : 请求的资源在服务器上不存在
        }}}

    /m/w : 写入 meta
        GET 参数
        || id || SHA1 的文件指纹 ||

        POST BODY : 
        {{{
        {
            id   : "0031360ffcaddcc7fd295dab18dc1644123e1704",    # 数据的指纹
            lm   : "2012-12-01",                   # 数据最后修改时间
            nm   : "abc.avi",                      # 原始文件名称
            pat  : "~/_key_d.6.metarial/abc.avi",  # 原始路径
            typ  : "avi",                          # 媒体类型
            use  : "zozoh",                        # 写入的用户
            dmn  : "danoo",                        # 所在域
            # ... 还可以有更多 ...
        }
        }}}

        返回:
        {{{
        {
            ok  : true,      # 状态指示
            type: "mw",      # 操作类型, "bw", "mw"
            len : 3241245,   # 写入了多长的字节
            sum : 78324124   # 总共多长
        }
        }}}

    /b/r : 读取文件内容
        HEADER 
        || Range          || 用作断点续传 ... ||
        || Content-Length || 用作断电续传 ... ||

        GET 参数
        || id || SHA1 的文件指纹 ||
        
        {{{
        HTTP 200 : 返回数据文件的内容
        HTTP 503 : 服务器内部节点正在同步数据，"Retry-After" 如果没有被设置，则默认 5 秒后重试
        HTTP 410 : 请求的资源在服务器上不存在
        }}}

    /b/w : 写入内容
        GET 参数: 
        || id  || SHA1 的文件指纹 ||
        || off || 开始写入的位置，以便续传，默认为 0 ||

        返回:
        {{{
        {
            ok  : true,      # 状态指示
            type: "bw",      # 操作类型, "bw", "mw"
            len : 3241245,   # 写入了多长的字节
        否则，应该试图去寻味 rRounter，看看 BIN 是否可用
        }}}

------------------------------------------------------------------------------------
BDU 的数据结构
    
    BDU 利用操作系统的文件系统进行大数据的索引

    {{{
    %BDU-ROOT%          # 和 Git 一样，一个文件的唯一标识为它内容的 SHA1 串
        00              # 头两位，将作为文件夹名称
            3136        # 次四位，将作为第二级文件夹内容
                0ffcaddcc7fd295dab18dc1644123e1704         # 这是个二进制文件内容
                0ffcaddcc7fd295dab18dc1644123e1704.meta    # 这是这个二进制文件的元数据
                78a7298699f05c91b9629f8047ad999712
                78a7298699f05c91b9629f8047ad999712.meta
                ...
        ...

    }}}
     * 文件的元数据文件将记录这个二进制文件的一些原始信息，它即使没有，也不影响 BDU 的正常工作
     * 有元数据仅仅是为了能够更快速的查看某个 BDU 的数据内容，以及有可能做一些数据反向工程

------------------------------------------------------------------------------------
BDU 的 HTTP 连接协议

    /m/r : 读取 meta
        GET 参数
        || id || SHA1 的文件指纹 ||
        
        {{{
        HTTP 200 : 返回 meta 文件的内容（即，JSON 字符串）
                   如果没有 meta 文件，但是有数据文件，则生成一个空的 JSON 字符串
        HTTP 503 : 服务器内部节点正在同步数据，"Retry-After" 如果没有被设置，则默认 3 秒后重试
        HTTP 410 : 请求的资源在服务器上不存在
        }}}

    /m/w : 写入 meta
        GET 参数
        || id || SHA1 的文件指纹 ||

        POST BODY : 
        {{{
        {
            id   : "0031360ffcaddcc7fd295dab18dc1644123e1704",    # 数据的指纹
            lm   : "2012-12-01",                   # 数据最后修改时间
            nm   : "abc.avi",                      # 原始文件名称
            pat  : "~/_key_d.6.metarial/abc.avi",  # 原始路径
            typ  : "avi",                          # 媒体类型
            use  : "zozoh",                        # 写入的用户
            dmn  : "danoo",                        # 所在域
            # ... 还可以有更多 ...
        }
        }}}

        返回:
        {{{
        {
            ok  : true,      # 状态指示
            type: "mw",      # 操作类型, "bw", "mw"
            len : 3241245,   # 写入了多长的字节
            sum : 78324124   # 总共多长
        }
        }}}

    /b/r : 读取文件内容
        HEADER 
        || Range          || 用作断点续传 ... ||
        || Content-Length || 用作断电续传 ... ||

        GET 参数
        || id || SHA1 的文件指纹 ||
        
        {{{
        HTTP 200 : 返回数据文件的内容
        HTTP 503 : 服务器内部节点正在同步数据，"Retry-After" 如果没有被设置，则默认 5 秒后重试
        HTTP 410 : 请求的资源在服务器上不存在
        }}}

    /b/w : 写入内容
        GET 参数: 
        || id  || SHA1 的文件指纹 ||
        || off || 开始写入的位置，以便续传，默认为 0 ||

        返回:
        {{{
        {
            ok  : true,      # 状态指示
            type: "bw",      # 操作类型, "bw", "mw"
            len : 3241245,   # 写入了多长的字节
            sum : 78324124   # 总共多长
        }
        }}}
