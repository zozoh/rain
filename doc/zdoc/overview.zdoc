#title:Rain 的概述
#author:zozoh(zozohtnt@gmail.com)
#index:0,1
----------------------------------------------------------------------------------
Rain 的逻辑结构

    <imgs/sys_overview.png>

     * 每个域就是一个 git 库
     * 每个 git 库将通过文件的形式保存这个域所有的信息
     * 每个文件都有自己的一个 .fobj 文件，记录自己的更多索引信息
     * Rain 服务，可以根据一个文件生成 .fobj 文件
     * 根据 .fobj 文件，可以很容易的将一个 git 库所有的文件索引信息，恢复回 MongoDB 集群中
     * 在 Git 服务中，默认会在 .gitignore 里忽略 .fobj 文件

    关于 rename 和 move
     * 实际实现的时候，没有 rename 只有 move
     * move 实际上就是 add 和 delete 的混合操作

    关于 rev
     * 内容修改了，自然版本号 +1
    
    关于隐藏文件
     * 以 . 开头的文件，默认会被认为是隐藏文件（记录在 .fobj 中）
     * 任何文件都有 hidden 这个属性（记录在 .fobj 中）


----------------------------------------------------------------------------------
Rain 的物理结构

    <imgs/sys_deploy.png>

    GDU : Git 仓库存储单元
         * 每个节点保存的 git 库都可能是不同的
         * 每个 git 库至少有 n 个物理备份（可配置）
         * 定期或者实时向 GIN 汇报自己 Git 库的情况
             * 节点启动时 - 全部
             * 每隔 10 分钟 （可配置）- 全部
             * 当节点被 push 的时候 - 仅改动
         * 如果同版本的 git 没有同步任何一个节点都拒绝 push 和 pull
         * 向一个节点推送数据，就相当于推送到所有的节点`
         * 因此从任何一个节点获取数据效果都是一样

    GIN : GDU 索引节点
         * 记录(不需要持久化)系统中所有 git 库所在的物理节点(由 GDU 汇报)
         * 实时将索引信息备份至从节点，从节点也不做持久化
         * 提供所有 git 库的版本信息，以便校验 git 库是否同步
         * 删除一个 Git 库，仅仅是在索引节点做一个标记（不持久化），对应的 GDU 会自行删除自己的库

    BDU : 大数据存储单元
         * 每个节点保存的大数据都可能是不同的
         * 每个大数据都有自己的元数据描述
         * 每个大数据都有至少 n 个物理备份（可配置）
         * 如果同一个的大数据，没有被同步，则禁止读和写
         * 如果向一个节点写入大数据，会传播到所有的相关物理节点
         * 定期或者实时向 BIN 汇报自己的数据情况
             * 节点启动时 - 全部
             * 每隔 10 分钟 （可配置）- 全部
             * 当数据被写入的时候 - 仅改动

    BIN : BDU 索引节点
         * 记录（不需要持久化）系统中所有大数据存储单元的数据信息
         * 删除一个大数据，仅仅是在索引节点上做一个标记，对应的 BDU 会自行删除自己的数据
         * 实时将索引信息备份到从将诶点，从节点也不做持久化

    rRouter : 系统数据路由
         * 记录了系统中所有的节点（GIN,BIN,GDU,BDU）的状态和位置（手工配置，只读）
         * 接受各个节点的汇报
         * 提供服务，任何节点可以查询到整个 rain 系统中的所有的其他节点状况
         * 管理员可以通过它，监控各个节点的连通情况
         * 主节点如果不工作了，其他节点查询的时候，rRounter 将返回从节点
             * 并且立刻向系统管理员报警
             * 如果主节点恢复了，将作为从节点继续工作
         * rRouter 有可视化界面，管理员可以:
             * 查看各个节点状况
             * 手工切换主从节点
             * 重启节点 
             * ...

    metabolism : 软件更新服务
         * 一个 metabolism-agent 程序运行在各个节点和服务器上
         * MA 将向更新服务发送心跳，以便汇报自己宿主机器的各种情况
         * 提供一个脚本列表，不通类型的节点会自行按照类型下载脚本和文件，并执行
         * 提供简单的界面，显示各个节点和服务器访问的情况，以及软件包情况 (可以是只读界面)
         * 软件包等，都按域来提供

    workbench : 前端工作台
         * 如果某个文件符合大数据规范，则记录影子文件，然后将内容写入大数据服务

    LB : 负载均衡
         * 简单的负载均衡
         * 根据请求的 IP，以及 workbench 的负载，进行 HTTP 重定向

    MongoDB 集群
         * workbench 会利用这个集群做 Git 库文件的高速索引缓存
         * 记录用户，域，任务，等数据
         * 记录播放器状态，心跳等数据
         * 记录远程命令等数据

    Gate : 安全服务
         * 提供BOX 的 MAC 地址和验证码 （只读）
         * 提供BOX 的 VPN 分配表
         * 提供注册转发(分配一个下载服务器地址，以及一张票)
             * 票有过期时间
             * 下载服务器定期会从 Gate 获取当日票的副本以便快速验证
             * 考虑到兼容老的播放器，提供一种名为“免检”的票

    rsServer : 静态资源服务
         * workbench 用到一些静态的 JS, Image, css 等文件
         * 用户头像，域头像等数据

    download : 下载服务
         * 提供高速的 TLD 下载
         * 接受 box 心跳，命令查询等

    cache : 缓存服务
         * 提供 TLD 下载缓存
         * 将 box 心跳等其他请求做代理转发






