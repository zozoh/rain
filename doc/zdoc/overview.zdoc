#title:Rain 的概述
#author:zozoh(zozohtnt@gmail.com)
#index:0,1
----------------------------------------------------------------------------------
Rain 的逻辑结构

    <imgs/sys_overview.png>

     * 每个域就是一个 git 库
     * 每个 git 库将通过文件的形式保存这个域所有的信息
     * 每个文件都有自己的一个 .fobj 文件，记录自己的更多索引信息
     * Rain 服务，可以根据一个文件生成 .fobj 文件
     * 根据 .fobj 文件，可以很容易的将一个 git 库所有的文件索引信息，恢复回 MongoDB 集群中
     * 在 Git 服务中，默认会在 .gitignore 里忽略 .fobj 文件

    关于 rename 和 move
     * 实际实现的时候，没有 rename 只有 move
     * move 实际上就是 add 和 delete 的混合操作

    关于 rev
     * 内容修改了，自然版本号 +1
    
    关于隐藏文件
     * 以 . 开头的文件，默认会被认为是隐藏文件（记录在 .fobj 中）
     * 任何文件都有 hidden 这个属性（记录在 .fobj 中）


----------------------------------------------------------------------------------
如何处理海量数据

    这个设想，仅仅是设想，因为我们一开始肯定是一个单机版本的服务器，这里不过是意淫
    一下我们将来可以扩展成什么样子
    
    <imgs/sys_deploy.png>

     * 新的 RNU 启动后，会向负载均衡注册
     * 每个 RDU 的心跳周期，为 10 秒
     * 注册后，30 秒，新的 RNU 才生效(即，负载均衡才会将其加入轮询序列)
         * 因为，这样，这个 RNU 必定是最新的数据了
     * 负载均衡会定期(3 秒)检查一遍所有的 RNU，如果发现网络不通的，则从内存中清除
     * RNU 每隔 30 秒，询问一下负载均衡自己是否被清除，如果被清除，则重新注册
